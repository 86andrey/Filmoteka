{"mappings":"AAGwB,MAAlBA,EAAQ,ICCG,MAQkCC,qBAC7C,IACA,MAAMC,EAAI,iGAAyDC,KAAKC,OAClEC,QAAiBC,MAAMJ,GACvBK,QAAaF,EAASG,OAE5B,OADAC,QAAQC,IAAIH,GACLA,EAAKI,QACX,MAAMC,GAAOH,QAAQC,IAAIE,IAIUX,mBAAlBY,GAClB,IACA,MAAMX,EAAI,2GAAmEW,UAAoBV,KAAKC,2BAChGC,QAAiBC,MAAMJ,GAG7B,aAFmBG,EAASG,QAEhBG,QACV,MAAMC,GAAOH,QAAQC,IAAIE,IAIwBX,2BAA1BY,GACzB,IACA,MAAMX,EAAI,2GAAmEW,wBACvER,QAAiBC,MAAMJ,GAE7B,aADmBG,EAASG,QAChBM,YACV,MAAMF,GAAOH,QAAQC,IAAIE,IAIOX,gBAAlBc,GACd,IACA,MAAMb,EAAI,sCAAoBa,4DACxBV,QAAiBC,MAAMJ,GAG7B,aAFmBG,EAASG,OAG3B,MAAMI,GAAOH,QAAQC,IAAIE,IAIUI,eAAzBZ,GACfD,KAAKC,KAAKA,EAIoBa,gBAC5Bd,KAAKC,MAAQ,EAIfc,YACEf,KAAKC,KAAO,EA7Dde,cACEhB,KAAKU,YAAc,GACnBV,KAAKC,KAAO,IDDlBJ,EAAMoB,eAIN,MAAMC,EAAgBC,SAASC,cAAc,oBAE7CtB,iBACI,MAAMuB,QAAcxB,EAAMoB,eAC1BX,QAAQC,IAAIc,GACZ,MAAMC,EAASD,EAAME,KAAI,EAACC,YAAEA,EAAWC,GAAEA,EAAEC,eAAEA,EAAcC,aAAEA,EAAYC,UAAEA,KAEhE,wEACsDH,oHAEFD,WAAqBE,yHAGzCA,qFAEnBE,OATGD,EAAaE,MAAM,KAAK,oGAa3CC,KAAK,IACbZ,EAAca,mBAAmB,YAAaT,GAElDU","sources":["src/index.js","src/js/movieFetch.js"],"sourcesContent":["import MovieApiService from './js/movieFetch.js';\n\n// объявляем экземпляр класса\nconst movie = new MovieApiService();\n\n// вызываем на этом экземпляре нужный метод (пример=>)\nmovie.fetchPopular();\n\n\n// Sergey--------------------------------------\nconst containerCard = document.querySelector('.container-card')\n\nasync function renderCard() {\n    const array = await movie.fetchPopular();\n    console.log(array);\n    const markup = array.map(({ poster_path, id, original_title, release_date, genre_ids }) => {\n        const newReleaseDate = release_date.split('-')[0];\n        return `\n                  <div class=\"container-card_single-card\" data-id=\"${id}\" >\n                    <div class=\"poster\">\n                        <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\">\n                    </div>\n                    <div class=\"info\">\n                      <h3 class=\"info_title\">${original_title}</h3>\n                      <p class=\"info_details\">\n                          ${genre_ids} | ${newReleaseDate}\n                      </p>\n                    </div>\n                  </div> \n        `}).join('');\n    containerCard.insertAdjacentHTML('beforeend', markup);\n}\nrenderCard()\n\n\n// Sergey--------------------------------------","const API_KEY = '03779c52c93ea63ebe46db37a334d7d8';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n\n  export default class MovieApiService {\n    constructor() {\n      this.searchQuery = '';\n      this.page = 1;\n      \n    }\n  \n    // метод получения массива популярных фильмов. Total_pages = 1000 по дефолту.\n    async fetchPopular(){\n      try{       \n      const url=`${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${this.page}`\n      const response=  await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      return data.results;\n     } catch(error){console.log(error);\n    }}\n    \n    // метод получения массива фильмов по запросу.\n     async fetchByQuery(searchQuery){\n      try{ \n      const url=`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=${this.page}&include_adult=false`\n      const response=  await fetch(url);\n      const data = await response.json();\n      // this.incrementPage();\n      return data.results;\n      } catch(error){console.log(error);\n      }}\n   \n    // метод получения колличества страниц в зависимости от запроса\n    async getPagesCountByQuery(searchQuery){\n      try{ \n      const url=`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&include_adult=false`\n      const response=  await fetch(url);\n      const data = await response.json();\n      return data.total_pages;\n      } catch(error){console.log(error);\n      }}\n\n    // метод получения инфо о фильме по айдишке\n      async fetchById(movieId){\n        try{       \n        const url=`${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n        const response=  await fetch(url);\n        const data = await response.json();\n        // console.log(data);\n        return data;\n       } catch(error){console.log(error);\n      }}\n\n    // метод присвоения странице номера из пагинации\n    setCurrentPage(page){\n    this.page=page;\n     }\n\n    // метод добавления по одной странице\n    incrementPage() {\n      this.page += 1;\n    }\n\n    // метод сброса нумерации страниц на первую\n    resetPage() {\n      this.page = 1;\n    }\n\n    // get query() {\n    //   return this.searchQuery;\n    // }\n  \n    // set query(newQuery) {\n    //   this.searchQuery = newQuery;\n    // }\n  }\n"],"names":["$1f0dc3b9307be026$var$movie","async","url","this","page","response","fetch","data","json","console","log","results","error","searchQuery","total_pages","movieId","setCurrentPage","incrementPage","resetPage","constructor","fetchPopular","$1f0dc3b9307be026$var$containerCard","document","querySelector","array","markup","map","poster_path","id","original_title","release_date","genre_ids","split","join","insertAdjacentHTML","$1f0dc3b9307be026$var$renderCard"],"version":3,"file":"index.5b256de5.js.map"}