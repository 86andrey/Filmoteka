{"mappings":"AACA,MAAMA,EAAQ,ICGG,MAQkCC,qBAC7C,IACA,MAAMC,EAAI,iGAAyDC,KAAKC,OAClEC,QAAiBC,MAAMJ,GACvBK,QAAaF,EAASG,OAE5B,OADAC,QAAQC,IAAIH,GACLA,EAAKI,QACX,MAAMC,GAAOH,QAAQC,IAAIE,IAIUX,mBAAlBY,GAClB,IACA,MAAMX,EAAI,2GAAmEW,UAAoBV,KAAKC,2BAChGC,QAAiBC,MAAMJ,GAG7B,aAFmBG,EAASG,QAEhBG,QACV,MAAMC,GAAOH,QAAQC,IAAIE,IAIDX,kBAC1B,IACA,MAAMC,EAAI,wGACJG,QAAiBC,MAAMJ,GACvBK,QAAaF,EAASG,OAE5B,OADAC,QAAQC,IAAIH,EAAKO,QACVP,EAAKO,OACV,MAAMF,GAAOH,QAAQC,IAAIE,IAIwBX,sBAA/BY,GACpB,IACA,MAAMX,EAAI,2GAAmEW,wBACvER,QAAiBC,MAAMJ,GAE7B,aADmBG,EAASG,QAChBO,cACV,MAAMH,GAAOH,QAAQC,IAAIE,IAIOX,gBAAlBe,GACd,IACA,MAAMd,EAAI,sCAAoBc,4DACxBX,QAAiBC,MAAMJ,GAG7B,aAFmBG,EAASG,OAG3B,MAAMI,GAAOH,QAAQC,IAAIE,IAIUK,eAAzBb,GACfD,KAAKC,KAAKA,EAIoBc,gBAC5Bf,KAAKC,MAAQ,EAIfe,YACEhB,KAAKC,KAAO,EAxEdgB,cACEjB,KAAKU,YAAc,GACnBV,KAAKC,KAAO,IDJZiB,EAAgBC,SAASC,cAAc,mBAEvCC,EAAiBF,SAASC,cAAc,wBASvCtB,eAAewB,EAAgBZ,GAClC,MAAMa,QAAc1B,EAAM2B,aAAad,GAEvCQ,EAAcO,gBAAgBC,EAAWH,GAI7C,SAASG,EAAWH,GAChB,OAAOA,EAAMI,KAAI,EAACC,YAAEA,EAAWC,GAAEA,EAAEC,eAAEA,EAAcC,aAAEA,EAAYC,UAAEA,KAExD,wEACsDH,oHAEFD,WAAqBE,yHAGzCA,qFAEnBE,OAAeD,mGAI/BE,KAAK,IAIVnC,eAAeoC,EAAUrB,GAE5B,MAAMT,QAAaP,EAAMsC,UAAUtB,GAEnCQ,EAAeI,gBAUnB,UAAyBG,YAACA,EAAWE,eAAEA,EAAcM,SAAEA,EAAQC,WAAEA,EAAUC,YAAEA,EAAWC,aAAEA,EAAYC,WAAEA,IACpG,MAAM,gMAMmCZ,WAAqBE,4FAE9BA,uxBAoBmBS,mIAECC,uIAITH,EAAWI,QAAQ,qHAGnBX,oHAGAQ,mLAMVF,2PAzDFM,CAAgBtC,GAE/C,MAAMuC,EAAcxB,SAASC,cAAc,iBACrCwB,EAAMzB,SAASC,cAAc,wBACrCuB,EAAcE,iBAAiB,SAAS,KAAQD,EAAME,UAAUC,IAAI,gBExCtE,MAAMC,EAAO7B,SAASC,cAAc,2BAC9B6B,EAAQ9B,SAASC,cAAc,eAGf4B,EAAjBH,iBAAiB,UAEtB,SAAqBK,GACpB,IAAKA,EAAIC,iBACVzC,YAAauC,EAAMG,MACF,KAAd1C,aAAkBJ,QAAQC,IAAI,qBACjCe,EAAgBZ,aAEhB,WFZOZ,iBACH,MAAMyB,QAAc1B,EAAMwD,eAE1BnC,EAAcoC,mBAAmB,YAAa5B,EAAWH,IEc7D,GAOe,MAATgC,EAAMpC,SAASC,cAAc,wBACbD,SAASC,cAAc,mBAE/ByB,iBAAiB,SAAUW,IACrC,MAAMC,EAAYD,EAAME,KAAK,GAC7B,IAAID,EAAWX,UAAUa,SAAS,8BAC9B,OACJJ,EAAMT,UAAUc,OAAO,aAEvB1B,EADeuB,EAAWI,QAAQhC","sources":["src/js/renderFunctions.js","src/js/movieFetch.js","src/index.js"],"sourcesContent":["import MovieApiService from './movieFetch';\nconst movie = new MovieApiService();\n\nconst containerCard = document.querySelector('.container-card')\n\nconst containerModal = document.querySelector('.modal__card-content')\n\n\nexport async function renderMarkupPopular() {\n    const array = await movie.fetchPopular();\n    // console.log(array);\n    containerCard.insertAdjacentHTML('beforeend', makeMarkup(array));\n}\n\nexport async function renderMarkupByQ(searchQuery) {\n    const array = await movie.fetchByQuery(searchQuery);\n    // console.log(array);\n    containerCard.innerHTML=await makeMarkup(array);\n    // containerCard.insertAdjacentHTML('beforeend', await makeMarkup(array));\n}\n\nfunction makeMarkup(array){\n    return array.map(({ poster_path, id, original_title, release_date, genre_ids }) => {\n        // const newReleaseDate = release_date.split('-')[0];\n        return `\n                  <div class=\"container-card_single-card\" data-id=\"${id}\" >\n                    <div class=\"poster\">\n                        <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\">\n                    </div>\n                    <div class=\"info\">\n                      <h3 class=\"info_title\">${original_title}</h3>\n                      <p class=\"info_details\">\n                          ${genre_ids} | ${release_date}\n                      </p>\n                    </div>\n                  </div> \n        `}).join('');\n}\n\n\nexport async function openModal(movieId) {\n    \n    const data = await movie.fetchById(movieId);\n    // console.log(array);\n    containerModal.innerHTML=await makeMarkupModal(data);\n    \n    const modalCloseBtn=document.querySelector('.modal__close');\n    const modal=document.querySelector('.modal__card-overlay');\n  modalCloseBtn.addEventListener('click', () => { modal.classList.add('is-hidden') })\n  \n    // containerCard.insertAdjacentHTML('beforeend', await makeMarkup(array));\n}\n\n\nfunction makeMarkupModal({poster_path, original_title, overview, popularity, genres_name, vote_average, vote_count}){\n    return`\n    <button type=\"button\" class=\"modal__close\" data-modal-close>\n      <svg class=\"modal__close-svg\">\n        X\n      </svg>\n    </button>\n  <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\" class=\"modal__img\" />\n  <div class=\"modal__info\">\n    <h2 class=\"modal__info-title\">${original_title}</h2>\n    <div class=\"modal__info-block\">\n      <ul class=\"modal__info discription__modal\">\n        <li class=\"discription__modal-item\">\n          <p class=\"discription__modal-title\">Vote / Votes</p>\n        </li>\n        <li class=\"discription__modal-item\">\n          <p class=\"discription__modal-title\">Popularity</p>\n        </li>\n        <li class=\"discription__modal-item\">\n          <p class=\"discription__modal-title\">Original Title</p>\n        </li>\n        <li class=\"discription__modal-item\">\n          <p class=\"discription__modal-title\">Genre</p>\n        </li>\n      </ul>\n      \n      <ul class=\"modal__info\">\n        <li class=\"discription__modal-item\">\n          <p class=\"discription__modal-text\">\n          <span class=\"discription__modal-text-vote\">${vote_average}</span>\n          <span class=\"discription__modal-text-slash\">/</span>\n          <span class=\"discription__modal-text-votes\">${vote_count}</span>\n          </p>\n        </li>\n        <li class=\"discription__modal-item\">\n          <p class=\"discription__modal-text\">${popularity.toFixed(1)}</p>\n        </li>\n        <li class=\"discription__modal-item\">\n          <p class=\"discription__modal-text\">${original_title}</p>\n        </li>\n        <li class=\"discription__modal-item\">\n          <p class=\"discription__modal-text\">${genres_name} </p>\n        </li>\n      </ul>\n    </div>\n    <div class=\"modal__info about__modal\">\n      <h4 class=\"about__modal-title\">About</h4>\n      <p class=\"about__modal-text\">${overview}</p>\n    </div>\n    <div class=\"modal__button\">\n      <button type=\"button\" class=\"modal__btn-add modal__btn-1\">add to Watched</button>\n      <button type=\"button\" class=\"modal__btn-add modal__btn-2\">add to queue</button>\n    </div>\n  </div>`\n}\n\n\n","const API_KEY = '03779c52c93ea63ebe46db37a334d7d8';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n\n  export default class MovieApiService {\n    constructor() {\n      this.searchQuery = '';\n      this.page = 1;\n      \n    }\n  \n    // метод получения массива популярных фильмов. Total_pages = 1000 по дефолту.\n    async fetchPopular(){\n      try{       \n      const url=`${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${this.page}`\n      const response=  await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      return data.results;\n     } catch(error){console.log(error);\n    }}\n    \n    // метод получения массива фильмов по запросу.\n     async fetchByQuery(searchQuery){\n      try{ \n      const url=`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=${this.page}&include_adult=false`\n      const response=  await fetch(url);\n      const data = await response.json();\n      // this.incrementPage();\n      return data.results;\n      } catch(error){console.log(error);\n      }}\n\n    // метода получения массива жанров\n    async getGenres(){\n      try{ \n      const url=`${BASE_URL}genre/movie/list?api_key=${API_KEY}&language=en-US`\n      const response=  await fetch(url);\n      const data = await response.json();\n      console.log(data.genres);\n      return data.genres;\n      } catch(error){console.log(error);\n      }}\n   \n    // метод получения колличества страниц в зависимости от запроса\n    async getCountByQuery(searchQuery){\n      try{ \n      const url=`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&include_adult=false`\n      const response=  await fetch(url);\n      const data = await response.json();\n      return data.total_results;\n      } catch(error){console.log(error);\n      }}\n\n    // метод получения инфо о фильме по айдишке\n      async fetchById(movieId){\n        try{       \n        const url=`${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n        const response=  await fetch(url);\n        const data = await response.json();\n        // console.log(data);\n        return data;\n       } catch(error){console.log(error);\n      }}\n\n    // метод присвоения странице номера из пагинации\n    setCurrentPage(page){\n    this.page=page;\n     }\n\n    // метод добавления по одной странице\n    incrementPage() {\n      this.page += 1;\n    }\n\n    // метод сброса нумерации страниц на первую\n    resetPage() {\n      this.page = 1;\n    }\n\n    // get query() {\n    //   return this.searchQuery;\n    // }\n  \n    // set query(newQuery) {\n    //   this.searchQuery = newQuery;\n    // }\n  }\n","import MovieApiService from './js/movieFetch.js';\nimport { renderMarkupPopular, renderMarkupByQ,  openModal } from './js/renderFunctions.js';\n\n//скрипт меняет стили кнопок в хедере\n//import './js/header_styles.js';\n\n// объявляем экземпляр класса и елементы\n// const movie = new MovieApiService();\nconst form = document.querySelector('.header-input-container');\nconst input = document.querySelector('#search-box');\n\n//функция поиска по запросу\nform.addEventListener('submit', onBtnSearch);\n\nfunction onBtnSearch(evt){\n try {evt.preventDefault();\nsearchQuery= input.value\nif(searchQuery===''){console.log('надо ввести фильм');}\nrenderMarkupByQ(searchQuery);\n}\ncatch{error=>console.log(error)};\n}\n\n\n// Sergey--------------------------------------\nrenderMarkupPopular()\n\n\n// Sergey--------------------------------------\n\n\n//набросок модалки\nconst modal=document.querySelector('.modal__card-overlay');\nconst containerCard = document.querySelector('.container-card')\n\ncontainerCard.addEventListener('click', (event)=>{\n    const movieClick =event.path[2]\n    if(!movieClick.classList.contains('container-card_single-card')){\n        return}\n    modal.classList.remove('is-hidden')\n    const movieId =movieClick.dataset.id;\n    openModal(movieId);\n    });\n\n//оптимизация роботи модалки\n// (() => {\n//     const refs = {\n//     // openModalBtn: document.querySelector('[data-modal-open]'), //openBtn\n//     closeModalBtn: document.querySelector('[data-modal-close]'), //closeBtn\n//     modal: document.querySelector('[data-modal]'), //modal\n//     modalContent: document.querySelector('[data-modal-content]'), //modalContent\n//     containerCard: document.querySelector('.container-card') //карточка фильма\n//     };\n//     refs.openModalBtn.addEventListener('click', openModal);\n//     refs.closeModalBtn.addEventListener('click', closeModal);\n//     refs.modal.addEventListener('click', closeByOverlay)\n//     refs.containerCard.addEventListener('click', openModal)\n    \n//         document.addEventListener('keydown', function(e) {\n//             if (e.key === 'Escape') {\n//                 closeModal()\n//             }\n//         });\n//     // function closeByOverlay(e) {   //зарытие фоном\n//     //     if (e.target === modal) {\n//     //         modal.removeEventListener('click', closeByOverlay);\n//     //         closeModal()\n//     //     }\n//     // };\n//     function openModal() {   //открыть модалку\n//         refs.modal.classList.remove('is-hidden');\n//     }\n//     function closeModal() {   //закрить модалку\n//         refs.modal.classList.add('is-hidden')\n//     }\n// })();\n\n\n//  function modalShow(event) {\n//     //   if (event.target.className !== \"DIV\") {\n//     //     return;\n//     //   }\n//     console.log(event);\n//     //   const selectedColor = event.target.dataset.color;\n//     //   output.textContent = `Selected color: ${selectedColor}`;\n//     //   output.style.color = selectedColor;\n//     }\n"],"names":["$8b6fb1387118c153$var$movie","async","url","this","page","response","fetch","data","json","console","log","results","error","searchQuery","genres","total_results","movieId","setCurrentPage","incrementPage","resetPage","constructor","$8b6fb1387118c153$var$containerCard","document","querySelector","$8b6fb1387118c153$var$containerModal","$8b6fb1387118c153$export$81267ed347c740fc","array","fetchByQuery","innerHTML","$8b6fb1387118c153$var$makeMarkup","map","poster_path","id","original_title","release_date","genre_ids","join","$8b6fb1387118c153$export$a7f6cffb6b8ba11c","fetchById","overview","popularity","genres_name","vote_average","vote_count","toFixed","$8b6fb1387118c153$var$makeMarkupModal","modalCloseBtn","modal","addEventListener","classList","add","$1f0dc3b9307be026$var$form","$1f0dc3b9307be026$var$input","evt","preventDefault","value","fetchPopular","insertAdjacentHTML","$1f0dc3b9307be026$var$modal","event","movieClick","path","contains","remove","dataset"],"version":3,"file":"index.d61e1ef2.js.map"}