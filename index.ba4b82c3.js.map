{"mappings":"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","sources":["src/js/renderFunctions.js","src/js/movieFetch.js","src/js/header_styles.js","src/index.js"],"sourcesContent":["import MovieApiService from './movieFetch';\nconst movie = new MovieApiService();\n\nconst containerCard = document.querySelector('.container-card')\n\nconst containerModal = document.querySelector('.modal__card-content')\n\n\nexport async function renderMarkupPopular() {\n    const array = await movie.fetchPopular();\n    // console.log(array);\n    containerCard.insertAdjacentHTML('beforeend', makeMarkup(array));\n}\n\nexport async function renderMarkupByQ(searchQuery) {\n    const array = await movie.fetchByQuery(searchQuery);\n    // console.log(array);\n    containerCard.innerHTML=await makeMarkup(array);\n    // containerCard.insertAdjacentHTML('beforeend', await makeMarkup(array));\n}\n\nfunction makeMarkup(array){\n    return array.map(({ poster_path, id, original_title, release_date, genre_ids }) => {\n        // const newReleaseDate = release_date.split('-')[0];\n        return `\n                  <div class=\"container-card_single-card\" data-id=\"${id}\" >\n                    <div class=\"poster\">\n                        <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\">\n                    </div>\n                    <div class=\"info\">\n                      <h3 class=\"info_title\">${original_title}</h3>\n                      <p class=\"info_details\">\n                          ${genre_ids} | ${release_date}\n                      </p>\n                    </div>\n                  </div> \n        `}).join('');\n}\n\n\nexport async function openModal(movieId) {\n    \n    const data = await movie.fetchById(movieId);\n    // console.log(array);\n    containerModal.innerHTML=await makeMarkupModal(data);\n    \n    const modalCloseBtn=document.querySelector('.modal__close');\n    const modal=document.querySelector('.modal__card-overlay');\n    modalCloseBtn.addEventListener('click', ()=>{modal.classList.add('is-hidden')})\n    // containerCard.insertAdjacentHTML('beforeend', await makeMarkup(array));\n}\n\n\nfunction makeMarkupModal({poster_path, id, original_title, release_date, genre_ids}){\n    return`\n    <button type=\"button\" class=\"modal__close\" data-modal-close>\n    X\n    <!-- data-modal-btn -->\n    <!-- <svg class=\"modal__close-svg\" data-modal-svg>\n      <use href=\"./images/icons.svg#icon-group\"></use>\n    </svg> -->\n  </button>\n  <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title} class=\"modal__img\" />\n  <div class=\"modal__info\">\n    <h2 class=\"modal__info-title\">${original_title}</h2>\n    <ul class=\"modal__info discription__modal\">\n      <li class=\"discription__modal-item\">\n        <p class=\"discription__modal-title\">Vote / Votes</p>\n        <p class=\"discription__modal-text\"><span>7.3</span> / 1260</p>\n      </li>\n      <li class=\"discription__modal-item\">\n        <p class=\"discription__modal-title\">Popularity</p>\n        <p class=\"discription__modal-text\">100.2</p>\n      </li>\n      <li class=\"discription__modal-item\">\n        <p class=\"discription__modal-title\">Original Title</p>\n        <p class=\"discription__modal-text\">${original_title}</p>\n      </li>\n      <li class=\"discription__modal-item\">\n        <p class=\"discription__modal-title\">Genre</p>\n        <p class=\"discription__modal-text\"> ${genre_ids}</p>\n      </li>\n    </ul>\n    <div class=\"modal__info about__modal\">\n      <h4 class=\"about__modal-title\">About</h4>\n      <p class=\"about__modal-text\">\n        Four of the Wests most infamous outlaws assemble to steal a huge\n        stash of gold from the most corrupt settlement of the gold rush towns.\n        But not all goes to plan one is killed and the other three escapes\n        with bags of gold e out in the abandoned gold mine where they\n        happen across another gang of three – who themselves were planning to\n        hit the very same bank! As tensions rise, things go from bad to worse\n        as they realise the bags of gold are filled with lead... theyve been\n        double crossed – but by who and how?\n      </p>\n    </div>\n    <div class=\"modal__button\">\n      <button type=\"button\" class=\"modal__btn-add\">add to Watched</button>\n      <button type=\"button\" class=\"modal__btn-add\">add to queue</button>\n    </div>\n  </div>`\n}\n\n\n","const API_KEY = '03779c52c93ea63ebe46db37a334d7d8';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n\n  export default class MovieApiService {\n    constructor() {\n      this.searchQuery = '';\n      this.page = 1;\n      \n    }\n  \n    // метод получения массива популярных фильмов. Total_pages = 1000 по дефолту.\n    async fetchPopular(){\n      try{       \n      const url=`${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${this.page}`\n      const response=  await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      return data.results;\n     } catch(error){console.log(error);\n    }}\n    \n    // метод получения массива фильмов по запросу.\n     async fetchByQuery(searchQuery){\n      try{ \n      const url=`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=${this.page}&include_adult=false`\n      const response=  await fetch(url);\n      const data = await response.json();\n      // this.incrementPage();\n      return data.results;\n      } catch(error){console.log(error);\n      }}\n\n    // метода получения массива жанров\n    async getGenres(){\n      try{ \n      const url=`${BASE_URL}genre/movie/list?api_key=${API_KEY}&language=en-US`\n      const response=  await fetch(url);\n      const data = await response.json();\n      console.log(data.genres);\n      return data.genres;\n      } catch(error){console.log(error);\n      }}\n   \n    // метод получения колличества страниц в зависимости от запроса\n    async getCountByQuery(searchQuery){\n      try{ \n      const url=`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&include_adult=false`\n      const response=  await fetch(url);\n      const data = await response.json();\n      return data.total_results;\n      } catch(error){console.log(error);\n      }}\n\n    // метод получения инфо о фильме по айдишке\n      async fetchById(movieId){\n        try{       \n        const url=`${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n        const response=  await fetch(url);\n        const data = await response.json();\n        // console.log(data);\n        return data;\n       } catch(error){console.log(error);\n      }}\n\n    // метод присвоения странице номера из пагинации\n    setCurrentPage(page){\n    this.page=page;\n     }\n\n    // метод добавления по одной странице\n    incrementPage() {\n      this.page += 1;\n    }\n\n    // метод сброса нумерации страниц на первую\n    resetPage() {\n      this.page = 1;\n    }\n\n    // get query() {\n    //   return this.searchQuery;\n    // }\n  \n    // set query(newQuery) {\n    //   this.searchQuery = newQuery;\n    // }\n  }\n","const refs = {\n    watchBtn: document.querySelector('#header-watched-button'),\n    queueBtn: document.querySelector('#header-queue-button'),\n  };\n\nrefs.watchBtn.addEventListener('click', onWatchBtnClick);\nrefs.queueBtn.addEventListener('click', onQueueBtnClick);\n\nfunction onWatchBtnClick(event) {\n    if (refs.watchBtn.classList.contains('is-header-nonactive')) {\n        refs.watchBtn.classList.remove('is-header-nonactive');\n        refs.watchBtn.classList.add('is-header-active');\n        refs.queueBtn.classList.remove('is-header-active');\n        refs.queueBtn.classList.add('is-header-nonactive');\n\n        // вызов функции обновления контента страницы\n    }\n}\n\nfunction onQueueBtnClick(event) {\n    if (refs.queueBtn.classList.contains('is-header-nonactive')) {\n        refs.queueBtn.classList.remove('is-header-nonactive');\n        refs.queueBtn.classList.add('is-header-active');\n        refs.watchBtn.classList.remove('is-header-active');\n        refs.watchBtn.classList.add('is-header-nonactive');\n\n        // вызов функции обновления контента страницы\n    }\n \n}","import MovieApiService from './js/movieFetch.js';\nimport { renderMarkupPopular, renderMarkupByQ,  openModal } from './js/renderFunctions.js';\n\n//скрипт меняет стили кнопок в хедере\nimport './js/header_styles.js';\n\n// объявляем экземпляр класса и елементы\n// const movie = new MovieApiService();\nconst form = document.querySelector('.header-input-container');\nconst input = document.querySelector('#search-box');\n\n//функция поиска по запросу\nform.addEventListener('submit', onBtnSearch);\n\nfunction onBtnSearch(evt){\n try {evt.preventDefault();\nsearchQuery= input.value\nif(searchQuery===''){console.log('надо ввести фильм');}\nrenderMarkupByQ(searchQuery);\n}\ncatch{error=>console.log(error)};\n}\n\n\n// Sergey--------------------------------------\nrenderMarkupPopular()\n\n\n// Sergey--------------------------------------\n\n\n//набросок модалки\nconst modal=document.querySelector('.modal__card-overlay');\nconst containerCard = document.querySelector('.container-card')\n\ncontainerCard.addEventListener('click', (event)=>{\n    const movieClick =event.path[2]\n    if(!movieClick.classList.contains('container-card_single-card')){\n        return}\n    modal.classList.remove('is-hidden')\n    const movieId =movieClick.dataset.id;\n    openModal(movieId);\n    });\n\n\n\n\n\n//  function modalShow(event) {\n//     //   if (event.target.className !== \"DIV\") {\n//     //     return;\n//     //   }\n//     console.log(event);\n//     //   const selectedColor = event.target.dataset.color;\n//     //   output.textContent = `Selected color: ${selectedColor}`;\n//     //   output.style.color = selectedColor;\n//     }\n"],"names":["$8b6fb1387118c153$var$movie","async","url","this","page","response","fetch","data","json","console","log","results","error","searchQuery","genres","total_results","movieId","setCurrentPage","incrementPage","resetPage","constructor","$8b6fb1387118c153$var$containerCard","document","querySelector","$8b6fb1387118c153$var$containerModal","$8b6fb1387118c153$export$81267ed347c740fc","array","fetchByQuery","innerHTML","$8b6fb1387118c153$var$makeMarkup","map","poster_path","id","original_title","release_date","genre_ids","join","$8b6fb1387118c153$export$a7f6cffb6b8ba11c","fetchById","$8b6fb1387118c153$var$makeMarkupModal","modalCloseBtn","modal","addEventListener","classList","add","$37db541da7982bf5$var$refs","watchBtn","queueBtn","event","contains","remove","$1f0dc3b9307be026$var$form","$1f0dc3b9307be026$var$input","evt","preventDefault","value","fetchPopular","insertAdjacentHTML","$1f0dc3b9307be026$var$modal","movieClick","path","dataset"],"version":3,"file":"index.ba4b82c3.js.map"}