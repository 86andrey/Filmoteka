{"mappings":"AAIiB,MAAMA,EAQ4BC,qBAC7C,IACA,MAAMC,EAAI,iGAAyDC,KAAKC,OAClEC,QAAiBC,MAAMJ,GACvBK,QAAaF,EAASG,OAE5B,OADAC,QAAQC,IAAIH,GACLA,EAAKI,QACX,MAAMC,GAAOH,QAAQC,IAAIE,IAIUX,mBAAlBY,GAClB,IACA,MAAMX,EAAI,2GAAmEW,UAAoBV,KAAKC,2BAChGC,QAAiBC,MAAMJ,GAG7B,aAFmBG,EAASG,QAEhBG,QACV,MAAMC,GAAOH,QAAQC,IAAIE,IAIDX,kBAC1B,IACA,MAAMC,EAAI,wGACJG,QAAiBC,MAAMJ,GACvBK,QAAaF,EAASG,OAE5B,OADAC,QAAQC,IAAIH,EAAKO,QACVP,EAAKO,OACV,MAAMF,GAAOH,QAAQC,IAAIE,IAIwBX,sBAA/BY,GACpB,IACA,MAAMX,EAAI,2GAAmEW,wBACvER,QAAiBC,MAAMJ,GAE7B,aADmBG,EAASG,QAChBO,cACV,MAAMH,GAAOH,QAAQC,IAAIE,IAIOX,gBAAlBe,GACd,IACA,MAAMd,EAAI,sCAAoBc,4DACxBX,QAAiBC,MAAMJ,GAG7B,aAFmBG,EAASG,OAG3B,MAAMI,GAAOH,QAAQC,IAAIE,IAIUK,eAAzBb,GACfD,KAAKC,KAAKA,EAIoBc,gBAC5Bf,KAAKC,MAAQ,EAIfe,YACEhB,KAAKC,KAAO,EAxEdgB,cACEjB,KAAKU,YAAc,GACnBV,KAAKC,KAAO,GCNlB,MAAMiB,EAAQ,IAAIrB,EAEZsB,EAAgBC,SAASC,cAAc,mBAQtCvB,eAAewB,EAAgBZ,GAClC,MAAMa,QAAcL,EAAMM,aAAad,GAEvCS,EAAcM,gBAAgBC,EAAWH,GAI7C,SAASG,EAAWH,GAChB,OAAOA,EAAMI,KAAI,EAACC,YAAEA,EAAWC,GAAEA,EAAEC,eAAEA,EAAcC,aAAEA,EAAYC,UAAEA,KAExD,wEACsDH,oHAEFD,WAAqBE,yHAGzCA,qFAEnBE,OAAeD,mGAI/BE,KAAK,IC7BgB,MAA3BC,EAAQ,IAAIrC,EACZsC,EAAOf,SAASC,cAAc,2BAC9Be,EAAQhB,SAASC,cAAc,eAGIa,EAAnCG,eAGgBF,EAAjBG,iBAAiB,UAEtB,SAAqBC,GACpB,IAAKA,EAAIC,iBACV9B,YAAa0B,EAAMK,MACF,KAAd/B,aAAkBJ,QAAQC,IAAI,qBACjCe,EAAgBZ,aAEhB,WDfOZ,iBACH,MAAMyB,QAAcL,EAAMmB,eAE1BlB,EAAcuB,mBAAmB,YAAahB,EAAWH,ICiB7D","sources":["src/js/movieFetch.js","src/js/renderFunctions.js","src/index.js"],"sourcesContent":["const API_KEY = '03779c52c93ea63ebe46db37a334d7d8';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n\n  export default class MovieApiService {\n    constructor() {\n      this.searchQuery = '';\n      this.page = 1;\n      \n    }\n  \n    // метод получения массива популярных фильмов. Total_pages = 1000 по дефолту.\n    async fetchPopular(){\n      try{       \n      const url=`${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=${this.page}`\n      const response=  await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      return data.results;\n     } catch(error){console.log(error);\n    }}\n    \n    // метод получения массива фильмов по запросу.\n     async fetchByQuery(searchQuery){\n      try{ \n      const url=`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=${this.page}&include_adult=false`\n      const response=  await fetch(url);\n      const data = await response.json();\n      // this.incrementPage();\n      return data.results;\n      } catch(error){console.log(error);\n      }}\n\n    // метода получения массива жанров\n    async getGenres(){\n      try{ \n      const url=`${BASE_URL}genre/movie/list?api_key=${API_KEY}&language=en-US`\n      const response=  await fetch(url);\n      const data = await response.json();\n      console.log(data.genres);\n      return data.genres;\n      } catch(error){console.log(error);\n      }}\n   \n    // метод получения колличества страниц в зависимости от запроса\n    async getCountByQuery(searchQuery){\n      try{ \n      const url=`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&include_adult=false`\n      const response=  await fetch(url);\n      const data = await response.json();\n      return data.total_results;\n      } catch(error){console.log(error);\n      }}\n\n    // метод получения инфо о фильме по айдишке\n      async fetchById(movieId){\n        try{       \n        const url=`${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n        const response=  await fetch(url);\n        const data = await response.json();\n        // console.log(data);\n        return data;\n       } catch(error){console.log(error);\n      }}\n\n    // метод присвоения странице номера из пагинации\n    setCurrentPage(page){\n    this.page=page;\n     }\n\n    // метод добавления по одной странице\n    incrementPage() {\n      this.page += 1;\n    }\n\n    // метод сброса нумерации страниц на первую\n    resetPage() {\n      this.page = 1;\n    }\n\n    // get query() {\n    //   return this.searchQuery;\n    // }\n  \n    // set query(newQuery) {\n    //   this.searchQuery = newQuery;\n    // }\n  }\n","import MovieApiService from './movieFetch';\nconst movie = new MovieApiService();\n\nconst containerCard = document.querySelector('.container-card')\n\nexport async function renderMarkupPopular() {\n    const array = await movie.fetchPopular();\n    // console.log(array);\n    containerCard.insertAdjacentHTML('beforeend', makeMarkup(array));\n}\n\nexport async function renderMarkupByQ(searchQuery) {\n    const array = await movie.fetchByQuery(searchQuery);\n    // console.log(array);\n    containerCard.innerHTML=await makeMarkup(array);\n    // containerCard.insertAdjacentHTML('beforeend', await makeMarkup(array));\n}\n\nfunction makeMarkup(array){\n    return array.map(({ poster_path, id, original_title, release_date, genre_ids }) => {\n        // const newReleaseDate = release_date.split('-')[0];\n        return `\n                  <div class=\"container-card_single-card\" data-id=\"${id}\" >\n                    <div class=\"poster\">\n                        <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\">\n                    </div>\n                    <div class=\"info\">\n                      <h3 class=\"info_title\">${original_title}</h3>\n                      <p class=\"info_details\">\n                          ${genre_ids} | ${release_date}\n                      </p>\n                    </div>\n                  </div> \n        `}).join('');\n}","import MovieApiService from './js/movieFetch.js';\nimport { renderMarkupPopular, renderMarkupByQ } from './js/renderFunctions.js';\n\n// объявляем экземпляр класса и елементы\nconst movie = new MovieApiService();\nconst form = document.querySelector('.header-input-container');\nconst input = document.querySelector('#search-box');\n\n// вызываем на этом экземпляре нужный метод (пример=>)\nmovie.fetchPopular();\n\n//функция поиска по запросу\nform.addEventListener('submit', onBtnSearch);\n\nfunction onBtnSearch(evt){\n try {evt.preventDefault();\nsearchQuery= input.value\nif(searchQuery===''){console.log('надо ввести фильм');}\nrenderMarkupByQ(searchQuery);\n}\ncatch{error=>console.log(error)};\n}\n\n\n// Sergey--------------------------------------\nrenderMarkupPopular()\n\n\n\n\n// Sergey--------------------------------------"],"names":["$478a51a321aee016$export$2e2bcd8739ae039","async","url","this","page","response","fetch","data","json","console","log","results","error","searchQuery","genres","total_results","movieId","setCurrentPage","incrementPage","resetPage","constructor","$8b6fb1387118c153$var$movie","$8b6fb1387118c153$var$containerCard","document","querySelector","$8b6fb1387118c153$export$81267ed347c740fc","array","fetchByQuery","innerHTML","$8b6fb1387118c153$var$makeMarkup","map","poster_path","id","original_title","release_date","genre_ids","join","$1f0dc3b9307be026$var$movie","$1f0dc3b9307be026$var$form","$1f0dc3b9307be026$var$input","fetchPopular","addEventListener","evt","preventDefault","value","insertAdjacentHTML"],"version":3,"file":"index.194bf4ae.js.map"}